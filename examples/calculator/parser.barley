-module(parser).

global Pos = 0.
global Size = 0.
global Tokens = [].
global Result = [].


type(Tok) -> lists:nth(Tok, 0).
text(Tok) -> lists:nth(Tok, 2).

consume_in_bounds(P) when P < Size -> P.
consume_in_bounds(P) -> Size - 1.

consume_type(Token, Type) -> type(Token) == Type.

get(RelativePos) ->
    FinalPosition = Pos + RelativePos,
    P = consume_in_bounds(FinalPosition),
    lists:nth(Tokens, P).

eval_match(C, T) when type(C) == T -> Pos = Pos + 1, true.

eval_match(C, T) -> false.

match(TokenType) ->
    C = get(0),
    eval_match(C, TokenType).

expr() -> assignment().

assignment() -> make_assign(Pos, text(get(0))).
make_assign(OldPos, Text) when match(variable) and match(eq) -> [assign, Text, additive()].
make_assign(OldPos, T) -> Pos = OldPos, additive().

additive() ->  make_add(multiplicative()).
make_add(Expr) when match(plus) -> make_add([binary_op, "+", Expr, multiplicative()]).
make_add(Expr) when match(minus) -> make_add([binary_op, "-", Expr, multiplicative()]).
make_add(Expr) -> Expr.

multiplicative() -> make_mult(unary()).
make_mult(Expr) when match(star) -> make_mult([binary_op, "*", Expr, unary()]).
make_mult(Expr) when match(slash) -> make_mult([binary_op, "/", Expr, unary()]).
make_mult(Expr) -> Expr.

unary() when match(minus) -> [unary_op, "-", primary(text(get(0)))].
unary() -> primary(text(get(0))).

primary(Text) when match(lparen) ->
    Expr = expr(),
    match(rparen),
    Expr.

primary(Text) when match(number) ->
    [value, Text].

primary(Text) when match(variable) ->
    [var, Text].

make_parse() when match(eof) -> Result.
make_parse() -> Expr = [expr()],
                Result = Result + Expr,
                make_parse().

parse(Toks) ->
    Pos = 0,
    Tokens = Toks,
    Size = barley:length(Toks),
    Result = [],
    make_parse().
