-module(test).

-doc("Calculator").

global ST = stack:new().

eval(S) ->
    String = string:split(S),
    io:fwriteln(String),
    process(Part) || Part -> String,
    pop().

process(P) -> rpn(P).

rpn("+") ->
    B = pop(),
    A = pop(),
    push(A + B).

rpn("-") ->
    B = pop(),
    A = pop(),
    push(A - B).

rpn("*") ->
    B = pop(),
    A = pop(),
    push(A * B).

rpn("/") ->
    B = pop(),
    A = pop(),
    push(A / B).

rpn(X) ->
    io:fwriteln(X),
    push(read(X)).

read(N) ->
    case string:as_number(N) ->
        of error: CaughtError.
        of Number: Number.
    end.

push(Value) -> stack:push(ST, Value).
pop() -> stack:pop(ST).
stack_trace() -> io:writeln(stack:stack_to_list(ST)).

main() ->
    io:fwriteln("result: " + eval("2 2 + 3 - 10 *")).
