-module(test).

filter(String) ->
    T = lexer:lex(String),
    T = lists:filter(def (X) -> (not ((lists:nth(X, 0) == var) and lists:nth(X, 2) == "")). end, T),.

eval(String) ->
    M = measurement:new(),
    measurement:start(M, "Lexing"),
    Tokens = filter(String),
    measurement:stop(M, "Lexing"),
    io:fwriteln(Tokens),
    measurement:start(M, "Parsing"),
    Tree = parser:parse(Tokens),
    io:fwriteln(Tree),
    measurement:stop(M, "Parsing"),
    measurement:start(M, "Evaluation"),
    Res = lists:last(lists:map(interpreter:eval, Tree)),
    measurement:stop(M, "Evaluation"),
    measurement:summary(M),
    Res.

prepare() ->
    amethyst:lexer("examples/amethyst/lexer.ams", "lexer"),
    amethyst:parser("examples/amethyst/parser.ams", "parser").

prompt() ->
    P = read(),
    io:fwriteln(eval(P)),
    prompt().

read() ->
    io:write(">> "),
    io:readline().

main() ->
    prepare(),
    barley:reparse("examples/amethyst/lexer.barley"),
    barley:reparse("examples/amethyst/parser.barley"),
    io:writeln(code:modules()),
    prompt().