-module(lexer).

global MINUS
 = "-"
.
global PLUS
 = "+"
.
global STAR
 = "*"
.
global SLASH
 = "/"
.
global EQ
 = "="
.
global LPAREN
 = "("
.
global RPAREN
 = ")"
.
global IS_DIGIT
 = def (S) -> not (string:as_number(S) == error). end
.
global IS_ID
 = def (S) -> string:is_identifier(S). end
.


-opt().

catch_while_id(Parts) -> catch_while_id(Parts, Pos, Pos).
catch_while_id(Parts, OldPos, NewPos) when lists:nth(Parts, NewPos) == end_of_list ->
    string:join(barley:sublist(Parts, OldPos, NewPos), "").
catch_while_id(Parts, OldPos, NewPos) when IS_ID(peek(Parts, 0)) ->
    next(Parts),
    catch_while_id(Parts, OldPos, NewPos + 1).
catch_while_id(Parts, OldPos, NewPos) -> string:join(barley:sublist(Parts, OldPos, NewPos), "").

catch_while_numbers(Parts) -> catch_while_numbers(Parts, Pos, Pos).
catch_while_numbers(Parts, OldPos, NewPos) when lists:nth(Parts, NewPos) == end_of_list ->
    string:join(barley:sublist(Parts, OldPos, NewPos), "").
catch_while_numbers(Parts, OldPos, NewPos) when not (string:as_number(lists:nth(Parts, NewPos)) == error) ->
    next(Parts),
    catch_while_numbers(Parts, OldPos, NewPos + 1).
catch_while_numbers(Parts, OldPos, NewPos) -> Pos = NewPos, string:join(barley:sublist(Parts, OldPos, NewPos), "").


global Pos = 0.
global Line = 1.
global EOFToken = [eof, -1, ""].

peek(Parts, RelativePos) ->
    FinalPosition = RelativePos + Pos,
    lists:nth(Parts, FinalPosition).

next(Parts) ->
    barley:define("Pos", Pos + 1),
    peek(Parts, 0).
illegal_character(S, L) -> barley:throw("illegal char '" + S + "'").

lex(String) -> lex(String, 1).

lex(String, Line) ->
    Pos = 0,
    Line = 1,
    process_parts(string:split(String, "")).

process_part(Parts, Symbol) when Symbol == 
 PLUS 
 -> 
  next(Parts),
  [plus, Line, "+"]
.
process_part(Parts, Symbol) when Symbol == 
 MINUS 
 -> 
  next(Parts),
  [minus, Line, "-"]
.
process_part(Parts, Symbol) when Symbol == 
 STAR 
 -> 
  next(Parts),
  [star, Line, "*"]
.
process_part(Parts, Symbol) when Symbol == 
 SLASH 
 -> 
  next(Parts),
  [slash, Line, "/"]
.
process_part(Parts, Symbol) when Symbol == 
 EQ 
 -> 
  next(Parts),
  [eq, Line, "="]
.
process_part(Parts, Symbol) when Symbol == 
 LPAREN 
 -> 
  next(Parts),
  [lparen, Line, "("]
.
process_part(Parts, Symbol) when Symbol == 
 RPAREN 
 -> 
  next(Parts),
  [rparen, Line, ")"]
.
process_part(Parts, Symbol) when 
IS_DIGIT(Symbol) 
 -> 
  [number, Line, catch_while_numbers(Parts)]
.
process_part(Parts, Symbol) when 
IS_ID(Symbol) 
 -> 
  [var, Line, catch_while_id(Parts)]
.
process_part(Parts, Symbol)
 when Symbol == 
  " "
 -> 
  next(Parts), 
  [skip, Line, ""].
process_part(Parts, Symbol)
 when Symbol == 
  "\n"
 -> 
Line = Line + 1, Pos = Pos + 1, [skip, Line + 1, ""].
process_part(Parts, Symbol) ->
    illegal_character(Symbol, Line)
.
process_part(Parts, Symbol) when Symbol == end_of_list -> EOFToken.

process_parts(Parts) ->
    Result = lists:reduce(def (X, Acc) -> First = peek(Parts, 0), Acc + [process_part(Parts, First)]. end, Parts, []),
    WithoutEOF = lists:filter(def (X) -> (not (lists:nth(X, 0) == eof)). end, Result),
    WithoutEOF = lists:filter(def (X) -> (not (lists:nth(X, 0) == skip)). end, WithoutEOF),
    WithoutEOF = WithoutEOF + [EOFToken].