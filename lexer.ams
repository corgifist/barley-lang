MINUS = "-"
PLUS = "+"
STAR = "*"
SLASH = "/"
IS_DIGIT = def (S) -> not (string:as_number(S) == error). end

Rules

once "+" -> [plus, Line, "+"]
once "-" -> [minus, Line, "-"]
once "*" -> [star, Line, "*"]
once "/" -> [slash, Line, "/"]

no_advance_expr IS_DIGIT(Symbol) -> [number, Line, catch_while_numbers(Parts)]

skip -> " "

line_increase -> "\n"

Catches

catch_while_numbers(Parts) -> catch_while_numbers(Parts, Pos, Pos).
catch_while_number(Parts, OldPos, NewPos) when lists:nth(Parts, NewPos) == end_of_list ->
    string:join(barley:sublist(Parts, OldPos, NewPos), "").
catch_while_numbers(Parts, OldPos, NewPos) when not (string:as_number(lists:nth(Parts, NewPos)) == error) ->
    catch_while_numbers(Parts, OldPos, NewPos + 1).
catch_while_numbers(Parts, OldPos, NewPos) -> Pos = NewPos, string:join(barley:sublist(Parts, OldPos, NewPos), "").
