-module(spy).
-inline(prepare) ->
   amethyst:lexer("spy/spy_lexer.ams", "spy_lexer"),
   amethyst:parser("spy/spy_parser.ams", "spy_parser"),
   barley:reparse("spy/spy_parser.barley"),
   barley:reparse("spy/spy_lexer.barley"),
   barley:reparse("spy/spy_interpreter.barley"),
   barley:reparse("spy/spy.barley"),
   io:fwriteln("SPY: initialization success!").

read_line() ->
    read_line(">> ").

read_line(Prompt) ->
    io:write(Prompt), io:readline().

lex(String) ->
    Tokens = spy_lexer:lex(String),
    Tokens = lists:filter(def (T) -> not (T[0] == id and T[2] == ""). end, Tokens),
    Tokens = lists:filter(def (T) -> not (T[0] == string and T[2] == ""). end, Tokens).

lexer_prompt() ->
    io:fwriteln(lex(read_line())),
    lexer_prompt().

parse(Text, Filename) ->
    T = lex(Text),
    TR = spy_parser:parse(T),
    io:writeln(TR),
    Script = spy_interpreter:master(TR),
    io:writeln(Script),
    file:write("spy/#{Filename}.py", Script),
    barley:os("python spy/#{Filename}.py").

parse_prompt() ->
   Prompt = read_line(),
   parse_manager(Prompt),
   parse_prompt().

parse_manager(P) when P == "SPYFILE" -> parse_file(read_line("|>> "), read_line("|>> ")).
parse_manager(P) when P == "SPYRELOAD" -> parse_reload().
parse_manager(P) -> parse(P, "spy").

parse_reload() ->
    prepare.

parse_file(Name, Filename) ->
    parse(file:read(Name), Filename).

main() ->
    prepare,
    parse_prompt().

