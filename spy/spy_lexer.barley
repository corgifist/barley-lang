-module(spy_lexer).

global MINUS
 = "-"
.
global PLUS
 = "+"
.
global STAR
 = "*"
.
global SLASH
 = "/"
.
global EQ
 = "="
.
global QUOTE
 = "\""
.
global NEWLINE
 = "\n"
.
global SPACE
 = " "
.
global COLON
 = ":"
.
global EXCL
 = "!"
.
global LBRACE
 = "{"
.
global RBRACE
 = "}"
.
global PERCENT
 = "%"
.
global COMMA
 = ","
.
global GT
 = ">"
.
global LT
 = "<"
.
global LPAREN
 = "("
.
global RPAREN
 = ")"
.
global IS_DIGIT
 = def (S) -> not (string:as_number(S) == error). end
.
global IS_ID
 = def (S) -> string:is_identifier(S). end
.


-opt().

make_plus(Parts, Symbol) ->
    Result = (peek(Parts, 0) == "=" ? [pluseq, Line, "+="] :: [plus, Line, "+"]),
    Result[0] == pluseq ? next(Parts) :: skip,
    Result.

make_minus(Parts, Symbol) ->
    Result = (peek(Parts, 0) == "=" ? [minuseq, Line, "-="] :: [minus, Line, "-"]),
    Result[0] == minuseq ? next(Parts) :: skip,
    Result.

make_star(Parts, Symbol) ->
    Result = (peek(Parts, 0) == "=" ? [stareq, Line, "*="] :: [star, Line, "*"]),
    Result[0] == stareq ? next(Parts) :: skip,
    Result.

make_slash(Parts, Symbol) ->
    Result = (peek(Parts, 0) == "=" ? [slasheq, Line, "/="] :: [slash, Line, "/"]),
    Result[0] == slasheq ? next(Parts) :: skip,
    Result.

make_eq(Parts, Symbol) ->
    Result = (peek(Parts, 0) == "=" ? [eqeq, Line, "=="] :: [eq, Line, "="]),
    Result[0] == eqeq ? next(Parts) :: skip,
    Result.

make_gt(Parts, Symbol) ->
    Result = (peek(Parts, 0) == "=" ? [gteq, Line, ">="] :: [gt, Line, ">"]),
    Result[0] == gteq ? next(Parts) :: skip,
    Result.

make_lt(Parts, Symbol) ->
    Result = (peek(Parts, 0) == "=" ? [lteq, Line, "<="] :: [lt, Line, "<"]),
    Result[0] == lteq ? next(Parts) :: skip,
    Result.

strange(Symbol) -> Pos = Pos + 1, [id, Line, Symbol].

space() ->
    [space].

newline() ->
    Line = Line + 1,
    [newline].

make_string(Parts) -> [string, Line, catch_while_string(Parts)].

make_word(Parts) ->
    Word = catch_while_id(Parts),
    reserved(Word) ? [types:as_atom(Word), Word] :: [id, Line, Word].

catch_while_string(Parts) -> catch_while_string(Parts, Pos, Pos).
catch_while_string(Parts, OldPos, NewPos) when Parts[NewPos] == end_of_list ->
    string:join(barley:sublist(Parts, OldPos, NewPos), "").
catch_while_string(Parts, OldPos, NewPos) when Parts[NewPos] == "\"" ->
    next(Parts),
    string:join(barley:sublist(Parts, OldPos, NewPos), "").
catch_while_string(Parts, OldPos, NewPos) ->
    next(Parts),
    catch_while_string(Parts, OldPos, NewPos + 1).

catch_while_id(Parts) -> catch_while_id(Parts, Pos, Pos).
catch_while_id(Parts, OldPos, NewPos) when lists:nth(Parts, NewPos) == end_of_list ->
    string:join(barley:sublist(Parts, OldPos, NewPos), "").
catch_while_id(Parts, OldPos, NewPos) when IS_ID(peek(Parts, 0)) ->
    next(Parts),
    catch_while_id(Parts, OldPos, NewPos + 1).
catch_while_id(Parts, OldPos, NewPos) -> string:join(barley:sublist(Parts, OldPos, NewPos), "").

catch_while_numbers(Parts) -> catch_while_numbers(Parts, Pos, Pos).
catch_while_numbers(Parts, OldPos, NewPos) when lists:nth(Parts, NewPos) == end_of_list ->
    string:join(barley:sublist(Parts, OldPos, NewPos), "").
catch_while_numbers(Parts, OldPos, NewPos) when not (string:as_number(lists:nth(Parts, NewPos)) == error) ->
    next(Parts),
    catch_while_numbers(Parts, OldPos, NewPos + 1).
catch_while_numbers(Parts, OldPos, NewPos) -> Pos = NewPos, string:join(barley:sublist(Parts, OldPos, NewPos), "").

reserved("not") -> true.
reserved("var") -> true.
reserved("Add") -> true.
reserved("From") -> true.
reserved("out") -> true.
reserved("input") -> true.
reserved("while") -> true.
reserved("do") -> true.
reserved("for") -> true.
reserved("is") -> true.
reserved("or") -> true.
reserved("and") -> true.
reserved("do") -> true.
reserved("in") -> true.
reserved(X) -> false.

global Pos = 0.
global Line = 1.
global EOFToken = [eof, -1, ""].

peek(Parts, RelativePos) ->
    FinalPosition = RelativePos + Pos,
    lists:nth(Parts, FinalPosition).

next(Parts) ->
    barley:define("Pos", Pos + 1),
    peek(Parts, 0).
illegal_character(S, L) -> barley:throw("illegal char '" + S + "' at line " + Line).

lex(String) -> lex(String, 1).

lex(String, Line) ->
    Pos = 0,
    Line = 1,
    process_parts(string:split(String, "")).

process_part(Parts, Symbol) when Symbol == 
 PLUS 
 -> 
  next(Parts),
  make_plus(Parts, Symbol)
.
process_part(Parts, Symbol) when Symbol == 
 MINUS 
 -> 
  next(Parts),
  make_minus(Parts, Symbol)
.
process_part(Parts, Symbol) when Symbol == 
 STAR 
 -> 
  next(Parts),
  make_star(Parts, Symbol)
.
process_part(Parts, Symbol) when Symbol == 
 SLASH 
 -> 
  next(Parts),
  make_slash(Parts, Symbol)
.
process_part(Parts, Symbol) when Symbol == 
 EQ 
 -> 
  next(Parts),
  make_eq(Parts, Symbol)
.
process_part(Parts, Symbol) when Symbol == 
 GT 
 -> 
  next(Parts),
  make_gt(Parts, Symbol)
.
process_part(Parts, Symbol) when Symbol == 
 LT 
 -> 
  next(Parts),
  make_lt(Parts, Symbol)
.
process_part(Parts, Symbol) when Symbol == 
 LPAREN 
 -> 
  next(Parts),
  [lparen, Line, "("]
.
process_part(Parts, Symbol) when Symbol == 
 RPAREN 
 -> 
  next(Parts),
  [rparen, Line, ")"]
.
process_part(Parts, Symbol) when Symbol == 
 QUOTE 
 -> 
  next(Parts),
  make_string(Parts)
.
process_part(Parts, Symbol) when Symbol == 
 PERCENT 
 -> 
  next(Parts),
  [percent, Line, "%"]
.
process_part(Parts, Symbol) when Symbol == 
 NEWLINE 
 -> 
  next(Parts),
  newline()
.
process_part(Parts, Symbol) when Symbol == 
 COLON 
 -> 
  next(Parts),
  [colon, Line, ":"]
.
process_part(Parts, Symbol) when Symbol == 
 EXCL 
 -> 
  next(Parts),
  [excl, Line, "!"]
.
process_part(Parts, Symbol) when Symbol == 
 LBRACE 
 -> 
  next(Parts),
  [lbrace, Line, "{"]
.
process_part(Parts, Symbol) when Symbol == 
 RBRACE 
 -> 
  next(Parts),
  [rbrace, Line, "}"]
.
process_part(Parts, Symbol) when Symbol == 
 COMMA 
 -> 
  next(Parts),
  [comma, Line, ","]
.
process_part(Parts, Symbol) when 
IS_DIGIT(Symbol) 
 -> 
  [number, Line, catch_while_numbers(Parts)]
.
process_part(Parts, Symbol) when 
IS_ID(Symbol) 
 -> 
  make_word(Parts)
.
process_part(Parts, Symbol)
 when Symbol == 
  " "
 -> 
  next(Parts), 
  [skip, Line, ""].
process_part(Parts, Symbol) ->
    strange(Symbol)
.
process_part(Parts, Symbol) when Symbol == end_of_list -> EOFToken.

process_parts(Parts) ->
    Result = lists:reduce(def (X, Acc) -> First = peek(Parts, 0), Acc + [process_part(Parts, First)]. end, Parts, []),
    WithoutEOF = lists:filter(def (X) -> (not (lists:nth(X, 0) == eof)). end, Result),
    WithoutEOF = lists:filter(def (X) -> (not (lists:nth(X, 0) == skip)). end, WithoutEOF),
    WithoutEOF = WithoutEOF + [EOFToken].