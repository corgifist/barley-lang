-module(lists).

map(F, [])  -> [].
map(F, Arr) ->
    F(X) || X -> Arr.

filter(Pred, Arr) ->
    case Pred(X) ->
        of true: X.
        of false: generator_skip.
    end || X -> Arr.

reduce(F, [], Acc) -> Acc.
reduce(F, H|T, Acc) ->
    reduce(F, T, F(H, Acc)).

append(Left, Right) -> Left + [Right].

concat(Args) -> concat(Args, "").
concat([], Acc) -> Acc.
concat(H|T, Acc) -> concat(T, Acc + H).

duplicate(Elem, Times) -> duplicate(Elem, Times, 0, []).
duplicate(Elem, Times, Iteration, Acc)
    when Iteration == Times ->
        Acc.
duplicate(Elem, Times, Iteration, Acc) -> duplicate(Elem, Times, Iteration + 1, Acc + [Elem]).

foreach(F, List) ->
    F(X) || X -> List,
    ok || Nothing -> List.

last(Arr) -> case ITERATION == barley:length(Arr) - 1 ->
 of true: X.
 of false: generator_skip.
end || X -> Arr.

nth(Arr, N) -> case ITERATION == N ->
    of true: X.
    of false: generator_skip.
end || X -> Arr.

reverse(Arr) -> reverse(Arr, []).
reverse([], Acc) -> Acc.
reverse(H|T, Acc) -> reverse(T, [H] + Acc).